// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model League {
  ligaId     String   @id
  seasonId   String
  name       String
  level      String?
  region     String?
  source     String
  scraped_at DateTime

  seasons Season[]
  matches Match[]

  @@unique([ligaId, seasonId])
  @@map("leagues")
}

model Season {
  seasonId String @id
  year     Int
  ligaId   String

  league League @relation(fields: [ligaId], references: [ligaId])
  matches Match[]
  seasonStats SeasonStat[]
  qaIssues QA_Issue[]

  @@map("seasons")
}

model Match {
  matchId     String  @id
  matchNo     Int?
  spielplan_id String?
  seasonId    String
  ligaId      String
  date        DateTime
  homeTeamId  String
  guestTeamId String
  result      String?
  status      String

  season       Season        @relation(fields: [seasonId], references: [seasonId])
  league       League        @relation(fields: [ligaId], references: [ligaId])
  homeTeam     Team          @relation("HomeMatches", fields: [homeTeamId], references: [id])
  guestTeam    Team          @relation("GuestMatches", fields: [guestTeamId], references: [id])
  boxscoreRows BoxscoreRow[]
  qaIssues     QA_Issue[]

  @@unique([matchNo, seasonId])
  @@unique([spielplan_id])
  @@map("matches")
}

model BoxscoreRow {
  id         String   @id @default(cuid())
  matchId    String?
  teamId     String
  playerId   String?
  playerName String
  pts        Int      @default(0)
  threePm    Int      @default(0) @map("3pm")
  threePa    Int      @default(0) @map("3pa")
  ftm        Int      @default(0)
  fta        Int      @default(0)
  source     String
  scraped_at DateTime

  match  Match?  @relation(fields: [matchId], references: [matchId])
  team   Team    @relation(fields: [teamId], references: [id])
  player Player? @relation(fields: [playerId], references: [id])

  @@map("boxscore_rows")
}

model Player {
  id      String   @id @default(cuid())
  name    String

  boxscoreRows BoxscoreRow[]
  seasonStats  SeasonStat[]
  aliases_rel  Alias[]

  @@map("players")
}

model AdminUser {
  id            String   @id @default(cuid())
  email         String   @unique
  password_hash String
  role          String   @default("club_admin") // club_admin, league_admin, super_admin
  verein_id     String?
  first_name    String?
  last_name     String?
  created_at    DateTime @default(now())
  last_login    DateTime?
  is_active     Boolean  @default(true)

  verein        Verein?  @relation(fields: [verein_id], references: [id])
  audit_logs    AuditLog[]

  @@map("admin_users")
}

model Verein {
  id                   String   @id @default(cuid())
  name                 String   // "BG Litzendorf e.V."
  short_name           String?  // "BG Litzendorf"
  website              String?
  email                String?
  phone                String?
  instagram            String?
  facebook             String?
  twitter              String?
  address_street       String?
  address_city         String?
  address_postal_code  String?
  address_state        String?  // "Bayern"
  region               String?  // "Oberfranken"
  country              String?  @default("Deutschland")
  founded_year         Int?
  status               String   @default("active") // active, inactive, merged
  logo_url             String?
  primary_color        String?  // Hex color
  secondary_color      String?  // Hex color
  description          String?  // Rich text
  home_gym_name        String?
  home_gym_address     String?
  home_gym_capacity    Int?
  home_gym_facilities  String?  // JSON array of facilities
  admin_user_id        String?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  teams                Team[]
  admin_users          AdminUser[]
  audit_logs           AuditLog[]

  @@map("vereine")
}

model Team {
  id                   String   @id @default(cuid())
  name                 String
  verein_id            String?
  team_number          Int?     // 1, 2, 3 for "BG Litzendorf 2"
  category             String?  // "Herren", "Damen", "U18", etc.
  gender               String?  // "m√§nnlich", "weiblich", "mixed"
  league_level         String?  // "Bezirksliga", "Kreisliga", etc.
  jersey_home_color    String?  // Hex color
  jersey_away_color    String?  // Hex color
  home_court           String?  // Specific court if different
  sponsors             String?  // JSON array of sponsors
  is_active            Boolean  @default(true)
  season_start         Int?     // Year when team was formed
  season_end           Int?     // Year when team was dissolved (if applicable)
  
  verein               Verein?  @relation(fields: [verein_id], references: [id])
  homeMatches          Match[]  @relation("HomeMatches")
  guestMatches         Match[]  @relation("GuestMatches")
  boxscoreRows         BoxscoreRow[]
  aliases_rel          Alias[]

  @@map("teams")
}

model AuditLog {
  id          String   @id @default(cuid())
  admin_id    String
  verein_id   String?
  action      String   // "create", "update", "delete", "import"
  entity_type String   // "verein", "team", "admin_user"
  entity_id   String?
  old_data    String?  // JSON of old values
  new_data    String?  // JSON of new values
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())

  admin       AdminUser @relation(fields: [admin_id], references: [id])
  verein      Verein?   @relation(fields: [verein_id], references: [id])

  @@map("audit_logs")
}

model SeasonStat {
  id       String @id @default(cuid())
  playerId String
  seasonId String
  pts      Int    @default(0)
  g        Int    @default(0)
  pts_g    Float  @default(0)
  threePm  Int    @default(0) @map("3pm")
  threePa  Int    @default(0) @map("3pa")
  threePPct Float  @default(0) @map("3p_pct")
  ftm      Int    @default(0)
  fta      Int    @default(0)
  ft_pct   Float  @default(0)

  player Player @relation(fields: [playerId], references: [id])
  season Season @relation(fields: [seasonId], references: [seasonId])

  @@unique([playerId, seasonId])
  @@map("season_stats")
}

model Alias {
  id         String @id @default(cuid())
  entityType String // "player" | "team"
  value      String
  targetId   String

  player Player? @relation(fields: [targetId], references: [id])
  team   Team?   @relation(fields: [targetId], references: [id])

  @@unique([entityType, value])
  @@map("aliases")
}

model QA_Issue {
  id          String   @id @default(cuid())
  type        String
  matchId     String?
  seasonId    String?
  description String
  status      String   @default("open") // "open" | "confirmed" | "ignored"
  created_at  DateTime @default(now())

  match  Match?  @relation(fields: [matchId], references: [matchId])
  season Season? @relation(fields: [seasonId], references: [seasonId])

  @@map("qa_issues")
}